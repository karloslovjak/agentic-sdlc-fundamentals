<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!--
        Parent: Spring Boot 3.5.x for Java 21 support
        Provides dependency management and common configuration
    -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.5.6</version>
        <relativePath/>
    </parent>

    <groupId>com.accenture</groupId>
    <artifactId>task-manager</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>Task Manager</name>
    <description>Task management application for Agentic SDLC Fundamentals certification</description>

    <properties>
        <!-- Java 21 for modern language features and performance -->
        <java.version>21</java.version>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- JaCoCo for code coverage analysis with 100% target -->
        <jacoco.version>0.8.11</jacoco.version>

        <!-- MapStruct for object mapping between layers -->
        <mapstruct.version>1.6.3</mapstruct.version>
    </properties>

    <dependencies>
        <!--
            Spring Boot Web: REST API support with embedded Tomcat
            Includes Jackson for JSON serialization
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!--
            Spring Data JPA: ORM layer for database operations
            Simplifies repository pattern implementation
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!--
            Spring Boot Validation: Bean validation annotations
            For request DTO validation (@NotBlank, @Size, etc.)
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!--
            PostgreSQL Driver: Production database
            Will be configured in application.properties
        -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!--
            Flyway Core: Database migration tool
            Manages versioned SQL scripts for schema evolution
        -->
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency>

        <!--
            Flyway PostgreSQL: PostgreSQL-specific dialect support
            Required for Flyway to work with PostgreSQL features
        -->
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-database-postgresql</artifactId>
        </dependency>

        <!--
            H2 Database: In-memory database for development and testing
            Faster tests, no external dependencies
        -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!--
            Lombok: Reduces boilerplate code
            @Getter, @Setter, @Builder, @Slf4j annotations
        -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!--
            MapStruct: Type-safe object mapping between layers
            Generates mapper implementations at compile time
            Used for API models ↔ Entity ↔ DTO conversions
        -->
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${mapstruct.version}</version>
        </dependency>

        <!--
            Spring Boot Test: Testing framework
            Includes JUnit 5, Mockito, AssertJ, Spring Test
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!--
            Spring Boot DevTools: Hot reload during development
            Automatically restarts application on code changes
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

        <!--
            SpringDoc OpenAPI: Swagger UI and OpenAPI 3 support
            Provides automatic API documentation and interactive UI at /swagger-ui.html
        -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.7.0</version>
        </dependency>

        <!--
            Jackson Databind Nullable: Support for nullable fields in generated models
            Required by OpenAPI Generator for proper null handling
        -->
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>jackson-databind-nullable</artifactId>
            <version>0.2.6</version>
        </dependency>

        <!--
            Jakarta Validation API: Bean validation annotations
            Used by generated models for validation (@NotNull, @Size, etc.)
        -->
        <dependency>
            <groupId>jakarta.validation</groupId>
            <artifactId>jakarta.validation-api</artifactId>
        </dependency>

        <!--
            Swagger Annotations: OpenAPI/Swagger annotations
            Used by generated code for API documentation
        -->
        <dependency>
            <groupId>io.swagger.core.v3</groupId>
            <artifactId>swagger-annotations</artifactId>
            <version>2.2.27</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!--
                OpenAPI Generator Maven Plugin: Generate models and API interfaces from OpenAPI spec
                Generates DTOs (models) and API interfaces into target/generated-sources
                Run with: mvn generate-sources
            -->
            <plugin>
                <groupId>org.openapitools</groupId>
                <artifactId>openapi-generator-maven-plugin</artifactId>
                <version>7.10.0</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <!-- OpenAPI specification file location -->
                            <inputSpec>${project.basedir}/src/main/resources/openapi/task-manager-api.yml</inputSpec>

                            <!-- Generator: spring for Spring Boot REST controllers -->
                            <generatorName>spring</generatorName>

                            <!-- Output directory for generated code -->
                            <output>${project.build.directory}/generated-sources/openapi</output>

                            <!-- Base package for generated code -->
                            <apiPackage>com.accenture.taskmanager.api</apiPackage>
                            <modelPackage>com.accenture.taskmanager.api.model</modelPackage>

                            <!-- Generate only models and API interfaces, not implementation -->
                            <generateApis>true</generateApis>
                            <generateApiTests>false</generateApiTests>
                            <generateApiDocumentation>false</generateApiDocumentation>
                            <generateModels>true</generateModels>
                            <generateModelTests>false</generateModelTests>
                            <generateModelDocumentation>false</generateModelDocumentation>
                            <generateSupportingFiles>false</generateSupportingFiles>

                            <!-- Configuration options for generated code -->
                            <configOptions>
                                <!-- Generate API interfaces only, controllers will implement them -->
                                <interfaceOnly>true</interfaceOnly>

                                <!-- Use Spring Boot 3.x annotations -->
                                <useSpringBoot3>true</useSpringBoot3>

                                <!-- Use Jakarta (not Javax) for validation -->
                                <useJakartaEe>true</useJakartaEe>

                                <!-- Use Java 8 date/time API (LocalDate, LocalDateTime) -->
                                <dateLibrary>java8</dateLibrary>

                                <!-- Generate builder pattern for models with Lombok -->
                                <additionalModelTypeAnnotations>@lombok.Builder @lombok.AllArgsConstructor</additionalModelTypeAnnotations>

                                <!-- Skip default interface implementation -->
                                <skipDefaultInterface>true</skipDefaultInterface>

                                <!-- Use ResponseEntity for API responses -->
                                <useResponseEntity>true</useResponseEntity>

                                <!-- Generate validation annotations -->
                                <useBeanValidation>true</useBeanValidation>
                                <performBeanValidation>true</performBeanValidation>

                                <!-- Use Optional for non-required fields -->
                                <useOptional>false</useOptional>
                            </configOptions>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--
                Spring Boot Maven Plugin: Package executable JAR
                Enables `mvn spring-boot:run` command
            -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <!-- Exclude Lombok from final JAR -->
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>

            <!--
                Build Helper Maven Plugin: Add generated sources to compilation
                Ensures generated OpenAPI code is compiled and available
            -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>3.6.0</version>
                <executions>
                    <execution>
                        <id>add-generated-source</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${project.build.directory}/generated-sources/openapi/src/main/java</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--
                Maven Compiler Plugin: Explicit Java 21 configuration
                Ensures consistent compilation across environments
                Includes MapStruct and Lombok annotation processors
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>21</source>
                    <target>21</target>
                    <compilerArgs>
                        <arg>-parameters</arg>
                    </compilerArgs>
                    <annotationProcessorPaths>
                        <!-- MapStruct annotation processor -->
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${mapstruct.version}</version>
                        </path>
                        <!-- Lombok annotation processor -->
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <!-- Lombok-MapStruct binding for compatibility -->
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok-mapstruct-binding</artifactId>
                            <version>0.2.0</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>

            <!--
                JaCoCo Maven Plugin: Code coverage analysis
                Generates reports and enforces 100% coverage on verify phase
            -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.version}</version>
                <executions>
                    <!-- Prepare agent for test execution -->
                    <execution>
                        <id>prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>

                    <!-- Generate coverage report after tests -->
                    <execution>
                        <id>report</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>

                    <!--
                        Enforce 100% coverage requirement
                        Uncomment when actual business logic is implemented
                    -->
                    <!--
                    <execution>
                        <id>check</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <rule>
                                    <element>BUNDLE</element>
                                    <limits>
                                        <limit>
                                            <counter>LINE</counter>
                                            <value>COVEREDRATIO</value>
                                            <minimum>1.00</minimum>
                                        </limit>
                                        <limit>
                                            <counter>BRANCH</counter>
                                            <value>COVEREDRATIO</value>
                                            <minimum>1.00</minimum>
                                        </limit>
                                    </limits>
                                </rule>
                            </rules>
                        </configuration>
                    </execution>
                    -->
                </executions>
            </plugin>

            <!--
                Maven Surefire Plugin: Unit test execution
                Configured for JUnit 5 and detailed reporting
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <includes>
                        <include>**/*Test.java</include>
                        <include>**/*Tests.java</include>
                    </includes>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
