package com.accenture.taskmanager.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.*;

import java.time.LocalDate;
import java.time.LocalDateTime;

/**
 * Task entity - represents a task in the database.
 *
 * This is the persistence layer model with JPA annotations.
 * Maps to the 'tasks' table in the database.
 *
 * Architecture:
 * - Entity is the source of truth for data structure
 * - Contains database-level constraints and relationships
 * - Separate from API models (TaskRequest/Response) for flexibility
 * - MapStruct handles conversion between entity and API models
 */
@Entity
@Table(name = "tasks")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Task {

    /**
     * Unique identifier for the task.
     * Auto-generated by database sequence.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Task title - required field.
     * Maximum 200 characters for database efficiency.
     */
    @NotBlank(message = "Title is required")
    @Size(max = 200, message = "Title must not exceed 200 characters")
    @Column(nullable = false, length = 200)
    private String title;

    /**
     * Detailed task description - optional field.
     * Maximum 2000 characters.
     */
    @Size(max = 2000, message = "Description must not exceed 2000 characters")
    @Column(length = 2000)
    private String description;

    /**
     * Current status of the task.
     * Stored as string in database for readability.
     */
    @NotNull(message = "Status is required")
    @Enumerated(EnumType.STRING)
    @Column(nullable = false, length = 20)
    private TaskStatus status;

    /**
     * Due date for task completion - optional.
     * Stored as DATE (no time component).
     */
    @Column(name = "due_date")
    private LocalDate dueDate;

    /**
     * Timestamp when the task was created.
     * Automatically set on persist.
     */
    @Column(nullable = false, updatable = false)
    private LocalDateTime createdAt;

    /**
     * Timestamp when the task was last updated.
     * Automatically updated on merge.
     */
    @Column(nullable = false)
    private LocalDateTime updatedAt;

    /**
     * JPA callback: Set createdAt and updatedAt before persisting new entity.
     */
    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
    }

    /**
     * JPA callback: Update updatedAt before updating existing entity.
     */
    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }

}
